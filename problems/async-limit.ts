/**
 * Необходимо написать функцию, которая принимает два аргумента: асинхронную функцию и временной лимит в миллисекундах.
 * Функция должна возвращать новую версию асинхронной функции, выполнение которой ограничено временным лимитом.
 * Должны выполняться следующие условия:
 *   Если время выполнения исходной функции меньше временного лимита, то новая функция должна вернуть результат выполнения асинхронной функции.
 *   Если время выполнения исходной функции больше временного лимита, то новая функция должна немедленно бросить ошибку "Превышен лимит времени исполнения".
 */

type AsyncLimit = <Args extends unknown[], Result>(
  fn: (...args: Args) => Promise<Result>,
  delay: number
) => (...args: Args) => Promise<Result>;

const asyncLimit: AsyncLimit = (fn, delay) => {
  throw new Error('not implemented');
};

export default asyncLimit;
